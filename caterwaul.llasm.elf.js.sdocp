sdocp('caterwaul.llasm.elf.js.sdoc', 'ELF generator | Spencer Tipping\nLicensed under the terms of the MIT source code license\n\nIntroduction.\nThe ELF generator provides a higher-level interface to a low-level assembler and produces an ELF image from a series of assembled functions and data elements. This ELF can then be linked to\nproduce a final executable image. It\'s just 32-bit for starters, though I may add 64-bit support later on.\n\n  caterwaul.tconfiguration(\'std seq\', \'llasm.elf\', function () {\n    this.configure(\'llasm.struct\').llasm /se[_.elf32 = let[struct = _.struct] in {} /se[\n      _.header = struct()._char(\'e_ident\', 16)._unsigned_short(\'e_type e_machine\')._unsigned_int(\'e_version e_entry e_phoff e_shoff e_flags\').\n                          _unsigned_short(\'e_ehsize e_phentsize e_phnum e_shentsize e_shnum e_shstrndx\'),\n      _.phdr   = struct()._unsigned_int(\'p_type p_offset p_vaddr p_paddr p_filesz p_memsz p_flags p_align\'),\n      _.shdr   = struct()._unsigned_int(\'sh_name sh_type sh_flags sh_addr sh_offset sh_size sh_link sh_info sh_addralign sh_entsize\'),\n      _.symbol = struct()._unsigned_int(\'st_name st_value st_size\')._unsigned_char(\'st_info st_other\')._unsigned_short(\'st_shndx\'),\n      _.rel    = struct()._unsigned_int(\'r_offset r_info\'),\n      _.rela   = struct()._unsigned_int(\'r_offset r_info r_addend\'),\n\n      _.header.reasonable  = {e_ident: [0x7f, 69, 76, 70, 1, 1, 1, 4,  0, 0, 0, 0, 0, 0, 0, 16], e_type: 1, e_machine: 3, e_version: 1, e_phoff: _.header.length, e_shoff: 0, e_flags: 0,\n                              e_ehsize: _.header.length, e_phnum: 1, e_shentsize: 0, e_shnum: 0, e_shstrndx: 0},\n      _.phdr.reasonable(s) = let[o = _.header.length + _.phdr.length] in\n                             {p_type: 1, p_offset: o, p_vaddr: 0x08048000 + o, p_paddr: 0x08048000 + o, p_filesz: s.length, p_memsz: s.length, p_flags: 5, p_align: 0x1000},\n\n      _.trivial_code(s) = seq[_.header(_.header.reasonable) + _.phdr(_.phdr.reasonable(s)) + s]]]});\n');