// Binary data emitter for Caterwaul sequences | Spencer Tipping
// Licensed under the terms of the MIT source code license

// Introduction.
// Javascript lacks a good way to generate binary data without worrying about things like buffer size. This module works with Caterwaul sequences to let you statefully push data onto the end of a
// queue, which can then be serialized all at once into an octet array. (From there it's trivial to convert to a node.js buffer or some such.) The method to serialize is slice().

// Note that this library requires a Javascript implementation that implements the string-index hack (i.e. 'foo'[0] === 'f').

// Data formats.
// You can write strings, which will be rendered as 7-bit ASCII, numbers, which will be rendered in big-endian format, or booleans, which are rendered as the bytes 0 for false, 1 for true.
// Writing null or undefined does nothing. Writing an array writes each element of the array.

  caterwaul.tconfiguration('std seq', 'llasm.binary-emitter', function () {
    this.namespace('llasm') /se[_.binary_emitter() = seq[~[]] /se[
      _.write() = let[as = arguments] in _ /se[seq[~as *!x[x === null || x === undefined ? _ :
                                                           x.constructor === String      ? seq[~x *[_.charCodeAt(0) & 0x7f] *!n[_.push(n)]] :
                                                           x.constructor === Number      ? x ? seq[(x >>>[_ >>> 8] <<[_]) *[_ & 0xff] *!n[_.push(n)]] : _.push(x) :
                                                           x.constructor === Boolean     ? _.push(Number(x)) : seq[~x *!n[_.write(n)]]]]]]]});

// Generated by SDoc 
