sdocp('test/qas.js.sdoc', 'Trivial loop on ECX test (qas tests).\nImplements this logic:\n\n| xorl %ebx, %ebx\n  movl $1, %eax\n  movl $100, %ecx\n  .top:\n    addl %ecx, %ebx\n    dec %ecx\n    test %ecx, %ecx\n    ja .top\n  int $0x80\n\ncaterwaul.clone(\'std seq llasm.numerics llasm.elf llasm.asm\')(function (require) {\n  var mc1 = caterwaul.llasm.asm(qas[x31 /b11_011011, xb001_b164 |+top, x01 /b11_001011 | xff /b11_001001\n                                                                     | x85 /b11_001001 | x77 /top[1].r8, xcb80]);\n\n  var mc2 = caterwaul.llasm.asm(qas[x31 /b11_011011, xb001_b164 |x01 /b11_001011 | xff /b11_001001\n                                                                |x85 /b11_001001 | x77f8 | xcb80]);\n\n  var mc3 = seq[x31+b11_011011 + xb001_b164 + x01+b11_001011 + xff+b11_001001 +\n                                              x85+b11_001001 + x77f8 + xcb80];\n\n  mc2.join(\', \') === mc3.join(\', \') || null[\'\\nmc2: #{mc2.join(", ")} should equal\\nmc3: #{mc3.join(", ")}\'];\n  mc1.join(\', \') === mc2.join(\', \') || null[\'\\nmc1: #{mc1.join(", ")} should equal\\nmc2: #{mc2.join(", ")}\'];\n  mc1.join(\', \') === mc3.join(\', \') || null[\'\\nmc1: #{mc1.join(", ")} should equal\\nmc3: #{mc3.join(", ")}\'];\n})(require);\n');