sdocp('test/binary-emitter.js.sdoc', 'Tests for binary emitter -- should handle strings, numbers, etc, and report correct length along the way.\n\ncaterwaul.clone(\'std seq llasm.binary-emitter\')(function () {\n  var b = caterwaul.llasm.binary_emitter();\n  b.length               === 0                 || null[\'new emitter has no length\'];\n  b.write(0)             === b                 || null[\'write() should return the emitter for 0\'];\n  b.length               === 1                 || null[\'write(0) failed to increment length\'];\n  b[0]                   === 0                 || null[\'write(0) failed to put 0 at index 0\'];\n  b.write(10)            === b                 || null[\'write() should return the emitter for numbers\'];\n  b.length               === 2                 || null[\'write(10) failed to increment length; got #{b.length} instead of 2\'];\n  b[1]                   === 10                || null[\'write(10) failed to put 10 at index 1\'];\n  b.write(\'hello world\') === b                 || null[\'write() should return the emitter for strings\'];\n  b[2]                   === \'h\'.charCodeAt(0) || null[\'write() failed to put h at position 2; got #{b[2]} instead\'];\n  b[3]                   === \'e\'.charCodeAt(0) || null[\'write() failed to put e at position 3; got #{b[3]} instead\'];\n  b.length               === 13                || null[\'write(hello world) failed to set length to 13; got #{b.length} instead\'];\n\n  var b2 = caterwaul.llasm.binary_emitter();\n  b2.write(0xcafebabe) === b2   || null[\'write(0xcafebabe) failed to return emitter\'];\n  b2.length            === 4    || null[\'wrong length after write(0xcafebabe); expected 4, got #{b2.length}\'];\n  b2[0]                === 0xca || null[\'write(0xcafebabe) failed to write 0xca to index 0; got #{b2[0]} instead\'];\n  b2[1]                === 0xfe || null[\'write(0xcafebabe) failed to write 0xfe to index 1; got #{b2[1]} instead\'];\n  b2[2]                === 0xba || null[\'write(0xcafebabe) failed to write 0xba to index 2; got #{b2[2]} instead\'];\n  b2[3]                === 0xbe || null[\'write(0xcafebabe) failed to write 0xbe to index 3; got #{b2[3]} instead\'];\n})();\n');