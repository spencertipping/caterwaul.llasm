Tests for binary emitter -- should handle strings, numbers, etc, and report correct length along the way.

caterwaul.clone('std seq llasm.binary-emitter')(function () {
  var b = caterwaul.llasm.binary_emitter();
  b.length               === 0                 || null['new emitter has no length'];
  b.write(0)             === b                 || null['write() should return the emitter for 0'];
  b.length               === 1                 || null['write(0) failed to increment length'];
  b[0]                   === 0                 || null['write(0) failed to put 0 at index 0'];
  b.write(10)            === b                 || null['write() should return the emitter for numbers'];
  b.length               === 2                 || null['write(10) failed to increment length; got #{b.length} instead of 2'];
  b[1]                   === 10                || null['write(10) failed to put 10 at index 1'];
  b.write('hello world') === b                 || null['write() should return the emitter for strings'];
  b[2]                   === 'h'.charCodeAt(0) || null['write() failed to put h at position 2; got #{b[2]} instead'];
  b[3]                   === 'e'.charCodeAt(0) || null['write() failed to put e at position 3; got #{b[3]} instead'];
  b.length               === 13                || null['write(hello world) failed to set length to 13; got #{b.length} instead'];

  var b2 = caterwaul.llasm.binary_emitter();
  b2.write(0xcafebabe) === b2   || null['write(0xcafebabe) failed to return emitter'];
  b2.length            === 4    || null['wrong length after write(0xcafebabe); expected 4, got #{b2.length}'];
  b2[0]                === 0xca || null['write(0xcafebabe) failed to write 0xca to index 0; got #{b2[0]} instead'];
  b2[1]                === 0xfe || null['write(0xcafebabe) failed to write 0xfe to index 1; got #{b2[1]} instead'];
  b2[2]                === 0xba || null['write(0xcafebabe) failed to write 0xba to index 2; got #{b2[2]} instead'];
  b2[3]                === 0xbe || null['write(0xcafebabe) failed to write 0xbe to index 3; got #{b2[3]} instead'];
})();
