// Trivial loop on ECX test (qas tests).
// Implements this logic:

// | xorl %ebx, %ebx
//   movl $1, %eax
//   movl $100, %ecx
//   .top:
//     addl %ecx, %ebx
//     dec %ecx
//     test %ecx, %ecx
//     ja .top
//   int $0x80

caterwaul.clone('std seq llasm.numerics llasm.elf llasm.asm')(function (require) {
  var mc1 = caterwaul.llasm.asm(qas[x31 /b11_011011, xb001_b164 |+top, x01 /b11_001011 | xff /b11_001001
                                                                     | x85 /b11_001001 | x77 /top[1].r8, xcb80]);

  var mc2 = caterwaul.llasm.asm(qas[x31 /b11_011011, xb001_b164 |x01 /b11_001011 | xff /b11_001001
                                                                |x85 /b11_001001 | x77f8 | xcb80]);

  var mc3 = seq[x31+b11_011011 + xb001_b164 + x01+b11_001011 + xff+b11_001001 +
                                              x85+b11_001001 + x77f8 + xcb80];

  mc2.join(', ') === mc3.join(', ') || null['\nmc2: #{mc2.join(", ")} should equal\nmc3: #{mc3.join(", ")}'];
  mc1.join(', ') === mc2.join(', ') || null['\nmc1: #{mc1.join(", ")} should equal\nmc2: #{mc2.join(", ")}'];
  mc1.join(', ') === mc3.join(', ') || null['\nmc1: #{mc1.join(", ")} should equal\nmc3: #{mc3.join(", ")}'];
})(require);

// Generated by SDoc 
